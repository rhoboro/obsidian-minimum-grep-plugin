/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  GrepModal: () => GrepModal,
  default: () => MinimumGrepPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");
var import_child_process = require("child_process");

// settings.ts
var import_obsidian = require("obsidian");
var MinimumGrepPluginSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("rgLocation").addText(
      (text) => text.setPlaceholder("rg").setValue(this.plugin.settings.rgLocation).onChange(async (value) => {
        this.plugin.settings.rgLocation = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("maxFiles").addText(
      (text) => text.setPlaceholder("50").setValue(`${this.plugin.settings.maxFiles}`).onChange(async (value) => {
        this.plugin.settings.maxFiles = Number(value);
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("minQueryLength").addText(
      (text) => text.setPlaceholder("2").setValue(`${this.plugin.settings.minQueryLength}`).onChange(async (value) => {
        this.plugin.settings.minQueryLength = Number(value);
        await this.plugin.saveSettings();
      })
    );
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  rgLocation: "/opt/homebrew/bin/rg",
  maxFiles: 50,
  minQueryLength: 2
};
var Match = class {
  constructor(num, line) {
    this.num = Number(num);
    this.line = line;
  }
};
var RgResult = class {
  constructor(path, num, line, searchPath) {
    this.path = path;
    this.name = path.replace(searchPath + "/", "");
    this.line = line;
    this.matches = [new Match(num, line)];
    this.searchPath = searchPath;
  }
};
var GrepModal = class extends import_obsidian2.SuggestModal {
  constructor(app, settings) {
    super(app);
    this.settings = settings;
  }
  async getSuggestions(query) {
    if (query.length <= this.settings.minQueryLength && /^[\x20-\x7e]*$/.test(query)) {
      return [];
    }
    const adapter = this.app.vault.adapter;
    const searchPath = adapter instanceof import_obsidian2.FileSystemAdapter ? adapter.getBasePath() : "";
    let results = [];
    const proc = (0, import_child_process.spawn)(this.settings.rgLocation, ["-i", "-n", "--no-heading", query, searchPath], { stdio: ["ignore", "pipe", "pipe"] });
    for await (const result of proc.stdout) {
      results = results.concat(result.toString().split("\n").map((value) => {
        const matched = value.match(/(.*):(\d+):(.*)/);
        if (matched && matched.length == 4 && /.md$/.test(matched[1]) && !/^- \[\[.*]]$/.test(matched[3])) {
          return new RgResult(matched[1], matched[2], matched[3], searchPath);
        } else {
          return null;
        }
      }).filter((value) => !!value));
    }
    return results.reduce((x, current) => {
      var _a;
      if (x.length > this.settings.maxFiles) {
        return x;
      }
      const exists = x.find((value) => value.path == current.path);
      if (exists) {
        if (exists.matches.length < 5) {
          exists.matches.push(current.matches[0]);
        }
      } else {
        const file = this.app.vault.getAbstractFileByPath(current.name);
        if (file instanceof import_obsidian2.TFile) {
          current.file = file;
          const frontMatter = (_a = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
          if (frontMatter) {
            if ("title" in frontMatter && frontMatter["title"]) {
              current.title = frontMatter["title"];
              x.push(current);
            }
          }
        }
      }
      return x;
    }, []).sort((a, b) => {
      const q = query.toLowerCase();
      if (a.title.toLowerCase().includes(q) && b.title.toLowerCase().includes(q)) {
        return Number(a.title.toLowerCase() <= b.title.toLowerCase());
      } else if (a.title.toLowerCase().includes(q)) {
        return -1;
      } else if (b.title.toLowerCase().includes(q)) {
        return 1;
      }
      if (a.matches.length == b.matches.length) {
        return Number(a.title.toLowerCase() <= b.title.toLowerCase());
      }
      return Number(a.matches.length > b.matches.length);
    });
  }
  renderSuggestion(result, el) {
    el.createEl("h1", { text: result.title });
    const content = result.matches.reduce((v, m) => {
      return v ? `${v}
${m.num}: ${m.line}` : `${m.num}: ${m.line}`;
    }, "");
    el.createEl("small", { text: content });
  }
  onChooseSuggestion(result, evt) {
    const file = this.app.vault.getAbstractFileByPath(result.name);
    if (file instanceof import_obsidian2.TFile) {
      const leaf = this.app.workspace.getLeaf();
      if (leaf) {
        return leaf.openFile(file);
      }
    }
  }
};
var MinimumGrepPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new MinimumGrepPluginSettingTab(this.app, this));
    this.addCommand({
      id: "open-minimum-grep-modal",
      name: "Open minimum grep modal",
      callback: () => {
        new GrepModal(this.app, this.settings).open();
      }
    });
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
